version: '3.7'
services:
  mongodb-prod:
    image: mongo:latest
    container_name: 'mongodb-prod'
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: nathan123
    volumes:
      - mongodb-prod-vol:/var/lib/mongo/data/
    ports:
      - "27017:27017"
    networks:
      - microservice-network

  rabbitmq-prod:
    image: rabbitmq:3-management-alpine
    container_name: 'rabbitmq-prod'
    environment:
      RABBITMQ_DEFAULT_USER: nathan
      RABBITMQ_DEFAULT_PASS: nathan123
    ports:
        - "5672:5672"
        - "15672:15672"
    volumes:
        - rabbitmq-prod-vol:/var/lib/rabbitmq
        - rabbitmq-prod-log-vol:/var/log/rabbitmq
    networks:
      - microservice-network

  products:
    build:
      dockerfile: Dockerfile
      context: ./products
    container_name: products
    environment:
      - NODE_ENV=prod
    ports:
      - "8002:8002"
    restart: on-failure
    depends_on:
      - "mongodb-prod"
      - "rabbitmq-prod"
    networks:
      - microservice-network

  shopping:
    build:
      dockerfile: Dockerfile
      context: ./shopping
    container_name: shopping
    environment:
      - NODE_ENV=prod
    ports:
      - "8003:8003"
    restart: on-failure
    depends_on:
      - "mongodb-prod"
      - "rabbitmq-prod"
    networks:
      - microservice-network

  customer:
    build:
      dockerfile: Dockerfile
      context: ./customer
    container_name: customer
    environment:
      - NODE_ENV=prod
    ports:
      - "8001:8001"
    restart: on-failure
    depends_on:
      - "mongodb-prod"
      - "rabbitmq-prod"
    networks:
      - microservice-network

  nginx-proxy:
    build:
      dockerfile: Dockerfile
      context: ./nginx-proxy
    depends_on:
      - products
      - shopping
      - customer
    ports:
      - "80:80"
    networks:
      - microservice-network

networks:
  microservice-network:

volumes:
  mongodb-prod-vol:
  rabbitmq-prod-vol:
  rabbitmq-prod-log-vol:
  